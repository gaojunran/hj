name: Release

on:
  push:
    tags:
      - 'v*.*.*'  

env:
  PROJECT_NAME: hj  

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: linux-x64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: linux-arm64
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - name: windows-x64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
          - name: windows-arm64
            runs-on: windows-latest
            target: aarch64-pc-windows-msvc
          - name: macos-x64
            runs-on: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runs-on: macos-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenSSL dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: brew install openssl@3

      - name: Set OpenSSL env (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.target }}

      - name: Build release
        shell: bash
        run: |
          mkdir -p dist
          BIN_SUFFIX=""
          if [[ "${{ matrix.runs-on }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi
          cargo build --release --target ${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX} \
             dist/${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release for version ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
